"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var amqp = require('amqplib');
/**
 * @class
 * @name RabbitMqInterface
 * @description
 *  This class provides us a number of methods for dealing with connecting to
 *  amqplib and allows us to publish and send events to rabbit mq and digest
 *  those events
 * */
var RabbitMqInterface = /** @class */ (function () {
    function RabbitMqInterface() {
        this.debug = false;
        this.connectionUri = 'amqp://localhost';
        this.offlineQueue = [];
        this.logger('[Rabbitode] is ready to use');
    }
    /**
     * @method
     * @name setRabbitUri
     * @description
     *  description here
     * */
    RabbitMqInterface.prototype.setRabbitUri = function (uri) {
        this.connectionUri = uri;
        return this;
    };
    /**
     * @method
     * @name endableDebugging
     * @description
     *  if this is called we will see debugging statements.
     * */
    RabbitMqInterface.prototype.enableDebugging = function () {
        this.debug = true;
        return this;
    };
    /**
     * @method
     * @name disableDebugging
     * @description
     *  if this is called we will not debugging statements.
     * */
    RabbitMqInterface.prototype.disableDebugging = function () {
        this.debug = false;
        return this;
    };
    /**
     * @method
     * @description
     * this method is called once upon start up
     * and the recursively anytime we have an error
     * */
    RabbitMqInterface.prototype.startRabbit = function () {
        return amqp.connect(this.connectionUri);
    };
    /**
     * @method
     * @name publishToExchange
     * @description
     *  This will publish our item to an exchange
     * @param {Object} messageConfig - the configuration of the message to be sent
     * @param {String} exchangeType - this is the type e.g. direct, fanout, topic
     * @param {Object} configs - a user can configure the exchanges and stuff whichever way they want
     * */
    RabbitMqInterface.prototype.publishToExchange = function (_a, exchangeType, configs) {
        var exchangeName = _a.exchangeName, routingKey = _a.routingKey, content = _a.content;
        if (configs === void 0) { configs = {
            exchange: { durable: false },
            channel: { persistent: true },
        }; }
        return __awaiter(this, void 0, void 0, function () {
            var conn, channel, e_1, e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 7, , 8]);
                        return [4 /*yield*/, this.startRabbit()];
                    case 1:
                        conn = _b.sent();
                        this.logger('[Rabbitode] creating channel');
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, conn.createConfirmChannel()];
                    case 3:
                        channel = _b.sent();
                        return [4 /*yield*/, channel.assertExchange(exchangeName, exchangeType, __assign({}, configs.exchange))];
                    case 4:
                        _b.sent();
                        this.sendPublishMessage(channel, configs, exchangeName, routingKey, content, exchangeType);
                        this.afterPublish(channel, conn);
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _b.sent();
                        this.logger("[Rabbitode] channel error " + e_1, 'error');
                        this.handlePublishError(e_1, exchangeName, routingKey, this.bufferIfy(content), exchangeType);
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_2 = _b.sent();
                        this.logger("[Rabbitode] channel error " + e_2, 'error');
                        this.handlePublishError(e_2, exchangeName, routingKey, this.bufferIfy(content), exchangeType);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    RabbitMqInterface.prototype.sendDirect = function (messageConfig, configs) {
        this.publishToExchange(messageConfig, 'direct', configs);
        return this;
    };
    RabbitMqInterface.prototype.sendFanout = function (messageConfig, configs) {
        this.publishToExchange(messageConfig, 'fanout', configs);
        return this;
    };
    RabbitMqInterface.prototype.sendTopic = function (messageConfig, configs) {
        this.publishToExchange(messageConfig, 'topic', configs);
        return this;
    };
    RabbitMqInterface.prototype.sendPublishMessage = function (channel, configs, exchangeName, routingKey, content, exchangeType) {
        return __awaiter(this, void 0, void 0, function () {
            var formattedContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger('[Rabbitode] publishing message');
                        formattedContent = this.bufferIfy(content);
                        return [4 /*yield*/, channel
                                .publish(exchangeName, routingKey, formattedContent, __assign({}, configs.channel), this.publisherCallback(exchangeName, routingKey, formattedContent, exchangeType))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RabbitMqInterface.prototype.publisherCallback = function (exchangeName, routingKey, formattedContent, exchangeType) {
        var _this = this;
        return function (err) {
            if (err) {
                _this.handlePublishError(err, exchangeName, routingKey, formattedContent, exchangeType);
            }
            _this.logger('[Rabbitode] message sent');
        };
    };
    RabbitMqInterface.prototype.afterPublish = function (channel, conn) {
        var _this = this;
        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger('[Rabbitode] closing channel');
                        return [4 /*yield*/, channel.close()];
                    case 1:
                        _a.sent();
                        this.logger('[Rabbitode] closing connection');
                        return [4 /*yield*/, conn.close()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); }, 2500);
    };
    RabbitMqInterface.prototype.handlePublishError = function (err, exchangeName, routingKey, formattedContent, exchangeType) {
        this.logger("[Rabbitode] there was a problem " + err, 'error');
        this.offlineQueue.push({
            exchangeType: exchangeType,
            message: {
                exchangeName: exchangeName, routingKey: routingKey, formattedContent: formattedContent,
            },
            isPublished: false,
        });
    };
    /**
     * @method
     * @name startConsumer
     * @description
     *  This will allow us to consume various sorts of queues, it MUST take a
     *  consumer call back param
     *  @param {Object} queueConfig - a user can configure their consumers
     *  @param {Object} configs - a user can configure the queue
     *  @param {Array} topics - a list of topics for a topic exchange
     * */
    RabbitMqInterface.prototype.startConsumer = function (_a, configs, topics) {
        var _b = _a.exchangeName, exchangeName = _b === void 0 ? '' : _b, _c = _a.exchangeType, exchangeType = _c === void 0 ? 'direct' : _c, _d = _a.queueName, queueName = _d === void 0 ? '' : _d, consumerCallback = _a.consumerCallback;
        if (configs === void 0) { configs = {
            exchange: {
                durable: false,
            },
            queue: {
                exclusive: false,
            },
            consumer: {
                noAck: false,
            },
        }; }
        if (topics === void 0) { topics = []; }
        return __awaiter(this, void 0, void 0, function () {
            var conn, channel, queue, e_3, e_4;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 14, , 15]);
                        return [4 /*yield*/, this.startRabbit()];
                    case 1:
                        conn = _e.sent();
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 12, , 13]);
                        return [4 /*yield*/, conn.createChannel()];
                    case 3:
                        channel = _e.sent();
                        this.logger('[Rabbitode] asserting exchange');
                        return [4 /*yield*/, channel.assertExchange(exchangeName, exchangeType, __assign({}, configs.exchange))];
                    case 4:
                        _e.sent();
                        this.logger('[Rabbitode] asserting queue');
                        return [4 /*yield*/, channel.assertQueue(queueName, __assign({}, configs.queue))];
                    case 5:
                        queue = _e.sent();
                        if (!(topics.length > 0)) return [3 /*break*/, 7];
                        this.logger('[Rabbitode] binding topics to queue');
                        return [4 /*yield*/, this.mapTopics(channel, queue.queue, exchangeName, topics)];
                    case 6:
                        _e.sent();
                        return [3 /*break*/, 9];
                    case 7:
                        this.logger('[Rabbitode] binding queue to exchange');
                        return [4 /*yield*/, channel.bindQueue(queue.queue, exchangeName, queue.queue)];
                    case 8:
                        _e.sent();
                        _e.label = 9;
                    case 9:
                        this.logger('[Rabbitode] prefetching');
                        return [4 /*yield*/, channel.prefetch(10)];
                    case 10:
                        _e.sent();
                        this.logger('[Rabbitode] consuming messages');
                        return [4 /*yield*/, channel.consume(queue.queue, consumerCallback(channel), __assign({}, configs.consumer))];
                    case 11:
                        _e.sent();
                        this.logger('[Rabbitode] waiting on more messages');
                        return [3 /*break*/, 13];
                    case 12:
                        e_3 = _e.sent();
                        this.logger("[Rabbitode] consumer channel error " + e_3, 'error');
                        return [3 /*break*/, 13];
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        e_4 = _e.sent();
                        this.logger("[Rabbitode] consumer connection error " + e_4, 'error');
                        return [3 /*break*/, 15];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @method
     * @name mapTopics
     * @description
     *  If we have topics well need to map them and await the promise
     * */
    RabbitMqInterface.prototype.mapTopics = function (channel, queue, exchangeName, topics) {
        var _this = this;
        return new Promise(function (resolve) {
            var newTopics = topics
                .map(function (topic) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, channel
                                .bindQueue(queue, exchangeName, topic)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            }); });
            resolve(newTopics);
        });
    };
    /**
     * @method
     * @name startDirectConsumer
     * @description
     *  this will allow us to start a direct consumer
     * @param {Object} consumerConfig - this is the config for our exchange name and other fields
     * */
    RabbitMqInterface.prototype.startDirectConsumer = function (consumerConfig, configs) {
        this.startConsumer(__assign({}, consumerConfig, { exchangeType: 'direct' }), configs);
        return this;
    };
    /**
     * @method
     * @name startFanoutConsumer
     * @description
     *  this will allow us to start a fanout consumer
     * @param {Object} consumerConfig - this is the config for our exchange name and other fields
     * */
    RabbitMqInterface.prototype.startFanoutConsumer = function (consumerConfig, configs) {
        this.startConsumer(__assign({}, consumerConfig, { exchangeType: 'fanout' }), configs);
        return this;
    };
    /**
     * @method
     * @name startTopicConsumer
     * @description
     *  this will allow us to start a topic consumer
     * @param {Object} consumerConfig - this is the config for our exchange name and other fields
     * @param {Array} topics - this is a list of topics we want the queue to listen for
     * */
    RabbitMqInterface.prototype.startTopicConsumer = function (consumerConfig, topics, configs) {
        this.startConsumer(__assign({}, consumerConfig, { exchangeType: 'topic' }), configs, topics);
        return this;
    };
    /**
     * @method
     * @name bufferIfy
     * @description
     *  This will turn our content into a buffer
     * @param {Object | String} content - the content we want to turn into a buffer
     * */
    RabbitMqInterface.prototype.bufferIfy = function (content) {
        var updatableContent = content;
        if (typeof updatableContent !== 'string' &&
            typeof updatableContent === 'object') {
            updatableContent = JSON.stringify(content);
        }
        return Buffer.from(updatableContent);
    };
    /**
     * @method
     * @name handleRabbitErrror
     * @description
     *  This will handleRabbitErrror
     * */
    RabbitMqInterface.prototype.handleRabbitErrror = function (err) {
        if (err.message !== 'Connection closing') {
            this.logger("[Rabbitode] conn error " + err.message, err.message);
        }
    };
    /**
     * @method
     * @name handleRabbitClose
     * @description
     *  This will handleRabbitClose
     * */
    RabbitMqInterface.prototype.handleRabbitClose = function () {
        var _this = this;
        this.logger('[Rabbitode] Restarting', 'warn');
        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, this.startRabbit()];
        }); }); }, 1000);
    };
    /**
     * @method
     * @name isJsonString
     * @description
     *  This will check to see if a value contains a valid json string
     * */
    RabbitMqInterface.prototype.isJsonString = function (str) {
        try {
            JSON.parse(str);
        }
        catch (e) {
            return false;
        }
        return true;
    };
    /**
     * @method
     * @description
     *  This will decode our buffer into an object, array, whatever it is.
     * */
    RabbitMqInterface.prototype.decodeToString = function (message) {
        return message.content.toString();
    };
    /**
     * @method
     * @description
     *  This will decode our buffer into an object, array, whatever it is.
     * */
    RabbitMqInterface.prototype.decodeToJson = function (message) {
        if (this.isJsonString(message.content.toString())) {
            return JSON.parse(message.content.toString());
        }
        this.logger('[Rabbitode] message is not valid json', 'error');
    };
    /**
     * @method
     * @name logger
     * @description
     *  This will either log or not log messages depending
     *  on a debug flag set by users
     * */
    RabbitMqInterface.prototype.logger = function (message, level) {
        if (level === void 0) { level = 'log'; }
        if (this.debug) {
            switch (level) {
                case 'warning':
                    console.warn(message);
                    break;
                case 'info':
                    console.info(message);
                    break;
                case 'error':
                    console.error(message);
                    break;
                default:
                    console.log(message);
                    break;
            }
        }
    };
    return RabbitMqInterface;
}());
exports.RabbitMqInterface = RabbitMqInterface;
module.exports.RabbitMqInterface = RabbitMqInterface;
//# sourceMappingURL=rabbitode.js.map